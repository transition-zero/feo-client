# generated by datamodel-codegen:
#   filename:  https://api.feo.transitionzero.org/v1/openapi.json
#   timestamp: 2023-11-23T14:01:54+00:00

from __future__ import annotations

from datetime import date, datetime
from typing import Any

from pydantic import BaseModel, Field, RootModel


class AliasBase(BaseModel):
    node_id: str = Field(..., title="Node Id")
    alias: str = Field(..., title="Alias")
    public: bool | None = Field(None, title="Public")
    primary_lang: str | None = Field(None, title="Primary Lang")


class BaseResponse(BaseModel):
    status_code: int = Field(..., title="Status Code")
    msg: str = Field(..., title="Msg")


class BodyUploadRecordsData(BaseModel):
    file: bytes = Field(..., title="File")


class BodyUploadRunData(BaseModel):
    file: bytes = Field(..., title="File")


class Collection(BaseModel):
    slug: str = Field(..., title="Slug")
    collection_type: str = Field(..., title="Collection Type")
    variables: dict[str, Any] | None = Field(None, title="Variables")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    gcloud_store: str | None = Field(None, title="Gcloud Store")


class DataSeries(BaseModel):
    x: list[int] = Field(..., title="X")
    y: list[float] = Field(..., title="Y")


class DeletedObjs(BaseModel):
    objects_deleted: int = Field(..., title="Objects Deleted")


class DummyUnit(BaseModel):
    dummy_param: str = Field(..., title="Dummy Param")


class Coordinate(RootModel[list[Any]]):
    root: list[Any]


class Geometry(BaseModel):
    type: str = Field(..., title="Type")
    coordinates: list[Coordinate] | list[float] = Field(..., title="Coordinates")


class LatLon(BaseModel):
    latitude: float = Field(..., title="Latitude")
    longitude: float = Field(..., title="Longitude")


class License(BaseModel):
    abbreviation: str = Field(..., title="Abbreviation")
    name: str = Field(..., title="Name")
    full_text: str = Field(..., title="Full Text")
    public: bool | None = Field(None, title="Public")


class LicensePatch(BaseModel):
    abbreviation: str = Field(..., title="Abbreviation")
    name: str | None = Field(..., title="Name")
    full_text: str | None = Field(..., title="Full Text")
    public: bool | None = Field(..., title="Public")


class LicenseQueryResponse(BaseModel):
    next_page: int | None = Field(..., title="Next Page")
    licenses: list[License] = Field(..., title="Licenses")


class Link(BaseModel):
    url: str = Field(..., title="Url")
    url_type: str = Field(..., title="Url Type")
    source_id: int = Field(..., title="Source Id")
    public: bool | None = Field(None, title="Public")
    id: int = Field(..., title="Id")


class LinkBase(BaseModel):
    url: str = Field(..., title="Url")
    url_type: str = Field(..., title="Url Type")
    source_id: int = Field(..., title="Source Id")
    public: bool | None = Field(None, title="Public")


class MapView(BaseModel):
    latitude: float = Field(..., title="Latitude")
    longitude: float = Field(..., title="Longitude")
    zoom: int = Field(..., title="Zoom")


class Metric(BaseModel):
    metric: str = Field(..., title="Metric")
    unit: str = Field(..., title="Unit")
    value: float = Field(..., title="Value")


class ModelId(BaseModel):
    slug: str = Field(..., title="Slug")


class ModelScenarioRunLink(BaseModel):
    url: str = Field(..., title="Url")
    title: str = Field(..., title="Title")
    properties: dict[str, Any] | None = Field(..., title="Properties")
    type: str = Field(..., title="Type")


class NodeSummary(BaseModel):
    capacity_summary: float | None = Field(None, title="Capacity Summary")


class NodeTypeSummaryElement(BaseModel):
    type_alias: str = Field(..., title="Type Alias")
    node_count: int = Field(..., title="Node Count")


class PowerUnitBase(BaseModel):
    unit_type: str = Field(..., title="Unit Type")
    operating_status: str = Field(..., title="Operating Status")
    latitude: float | None = Field(..., title="Latitude")
    longitude: float | None = Field(..., title="Longitude")
    fuel_type: str | None = Field(..., title="Fuel Type")
    capacity: float | None = Field(..., title="Capacity")
    capacity_unit: str | None = Field(..., title="Capacity Unit")
    start_date: date | None = Field(..., title="Start Date")
    retired_date: date | None = Field(None, title="Retired Date")
    technology_detail: dict[str, Any] | None = Field(..., title="Technology Detail")
    has_ccs: bool | None = Field(..., title="Has Ccs")
    is_captive: bool | None = Field(..., title="Is Captive")
    captive_detail: dict[str, Any] | None = Field(None, title="Captive Detail")
    properties: dict[str, Any] | None = Field(..., title="Properties")
    other_ids_names: dict[str, Any] | None = Field(..., title="Other Ids Names")
    ownership_details: dict[str, Any] | None = Field(..., title="Ownership Details")


class Publisher(BaseModel):
    id: int = Field(..., title="Id")
    name: str = Field(..., title="Name")
    public: bool | None = Field(None, title="Public")
    organisation_type: str = Field(..., title="Organisation Type")
    slug: str | None = Field(None, title="Slug")


class PublisherBase(BaseModel):
    name: str = Field(..., title="Name")
    public: bool | None = Field(None, title="Public")
    organisation_type: str = Field(..., title="Organisation Type")
    slug: str | None = Field(None, title="Slug")


class PublisherPatch(BaseModel):
    id: int = Field(..., title="Id")
    name: str | None = Field(None, title="Name")
    public: bool | None = Field(None, title="Public")
    organisation_type: str | None = Field(None, title="Organisation Type")


class PublisherQueryResponse(BaseModel):
    publishers: list[Publisher] = Field(..., title="Publishers")
    next_page: int | None = Field(..., title="Next Page")


class RasterMeta(BaseModel):
    collection_slug: str = Field(..., title="Collection Slug")
    slug: str = Field(..., title="Slug")
    datetime: datetime = Field(..., title="Datetime")
    is_categorical: bool = Field(..., title="Is Categorical")
    filename: str = Field(..., title="Filename")
    valid_datetime: datetime | None = Field(None, title="Valid Datetime")
    variable: str | None = Field(None, title="Variable")
    member: int | None = Field(None, title="Member")
    properties: dict[str, Any] | None = Field(None, title="Properties")


class Record(BaseModel):
    node_id: str | None = Field(None, title="Node Id")
    public: bool | None = Field(None, title="Public")
    source_id: int = Field(..., title="Source Id")
    source_node_id: str | None = Field(None, title="Source Node Id")
    target_node_id: str | None = Field(None, title="Target Node Id")
    timestamp: datetime = Field(..., title="Timestamp")
    valid_timestamp_start: datetime = Field(..., title="Valid Timestamp Start")
    valid_timestamp_end: datetime = Field(..., title="Valid Timestamp End")
    datum_type: str = Field(..., title="Datum Type")
    datum_detail: str = Field(..., title="Datum Detail")
    value: float | None = Field(..., title="Value")
    unit: str = Field(..., title="Unit")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    id: int = Field(..., title="Id")


class RecordBase(BaseModel):
    node_id: str | None = Field(None, title="Node Id")
    public: bool | None = Field(None, title="Public")
    source_id: int = Field(..., title="Source Id")
    source_node_id: str | None = Field(None, title="Source Node Id")
    target_node_id: str | None = Field(None, title="Target Node Id")
    timestamp: datetime = Field(..., title="Timestamp")
    valid_timestamp_start: datetime = Field(..., title="Valid Timestamp Start")
    valid_timestamp_end: datetime = Field(..., title="Valid Timestamp End")
    datum_type: str = Field(..., title="Datum Type")
    datum_detail: str = Field(..., title="Datum Detail")
    value: float | None = Field(..., title="Value")
    unit: str = Field(..., title="Unit")
    properties: dict[str, Any] | None = Field(None, title="Properties")


class RecordResponse(BaseModel):
    records: list[Record] = Field(..., title="Records")
    next_page: int | None = Field(..., title="Next Page")


class RunBase(BaseModel):
    name: str = Field(..., title="Name")
    slug: str | None = Field(None, title="Slug")
    description: str = Field(..., title="Description")
    public: bool = Field(..., title="Public")
    scenario_slug: str = Field(..., title="Scenario Slug")
    model_slug: str = Field(..., title="Model Slug")
    data: dict[str, Any] | None = Field(None, title="Data")
    featured: bool | None = Field(None, title="Featured")
    status: str = Field(..., title="Status")
    links: list[ModelScenarioRunLink] | None = Field(None, title="Links")
    capacity_datetime_convention: str | None = Field(None, title="Capacity Datetime Convention")
    production_datetime_convention: str | None = Field(None, title="Production Datetime Convention")
    flow_datetime_convention: str | None = Field(None, title="Flow Datetime Convention")
    preview_image_url: str | None = Field(None, title="Preview Image Url")


class RunId(BaseModel):
    slug: str = Field(..., title="Slug")


class RunSingleExtrema(BaseModel):
    max_value: float | None = Field(..., title="Max Value")
    min_value: float | None = Field(..., title="Min Value")
    max_datetime: datetime | None = Field(..., title="Max Datetime")
    min_datetime: datetime | None = Field(..., title="Min Datetime")


class ScenarioBase(BaseModel):
    name: str = Field(..., title="Name")
    version: str = Field(..., title="Version")
    slug: str | None = Field(None, title="Slug")
    model_slug: str = Field(..., title="Model Slug")
    public: bool = Field(..., title="Public")
    description: str | None = Field(..., title="Description")
    featured: bool | None = Field(None, title="Featured")
    status: str = Field(..., title="Status")
    links: list[ModelScenarioRunLink] | None = Field(None, title="Links")
    data: dict[str, Any] | None = Field(None, title="Data")


class ScenarioId(BaseModel):
    slug: str = Field(..., title="Slug")


class SignedForUrl(BaseModel):
    url: str = Field(..., title="Url")


class SlugCheckInp(BaseModel):
    slug: str = Field(..., title="Slug")


class Source(BaseModel):
    name: str = Field(..., title="Name")
    public: bool = Field(..., title="Public")
    year: int = Field(..., title="Year")
    description: str = Field(..., title="Description")
    license_abbrv: str = Field(..., title="License Abbrv")
    publisher_id: int = Field(..., title="Publisher Id")
    slug: str | None = Field(None, title="Slug")
    id: int = Field(..., title="Id")


class SourceBase(BaseModel):
    name: str = Field(..., title="Name")
    public: bool = Field(..., title="Public")
    year: int = Field(..., title="Year")
    description: str = Field(..., title="Description")
    license_abbrv: str = Field(..., title="License Abbrv")
    publisher_id: int = Field(..., title="Publisher Id")
    slug: str | None = Field(None, title="Slug")


class SourcePatch(BaseModel):
    id: int = Field(..., title="Id")
    name: str | None = Field(None, title="Name")
    year: int | None = Field(None, title="Year")
    description: str | None = Field(None, title="Description")
    license_abbrv: str | None = Field(None, title="License Abbrv")
    publisher_id: int | None = Field(None, title="Publisher Id")
    public: bool | None = Field(None, title="Public")


class SourceQueryResponse(BaseModel):
    next_page: int | None = Field(..., title="Next Page")
    sources: list[Source] = Field(..., title="Sources")


class TimeScopeContiguous(BaseModel):
    resolution_hourly: int = Field(..., title="Resolution Hourly")


class TimeScopeSlicePart(BaseModel):
    id: str = Field(..., title="Id")
    description: str = Field(..., title="Description")


class TimeScopeSlices(BaseModel):
    parts: list[TimeScopeSlicePart] | None = Field(None, title="Parts")
    dayparts: list[TimeScopeSlicePart] | None = Field(None, title="Dayparts")
    yearparts: list[TimeScopeSlicePart] | None = Field(None, title="Yearparts")


class UserCheck(BaseModel):
    username: str = Field(..., title="Username")


class UserCreate(BaseModel):
    created_at: datetime | None = Field(None, title="Created At")
    updated_at: datetime | None = Field(None, title="Updated At")
    last_password_reset: datetime | None = Field(None, title="Last Password Reset")
    email_verified: bool | None = Field(None, title="Email Verified")
    phone_verified: bool | None = Field(None, title="Phone Verified")
    app_metadata: dict[str, Any] | str | None = Field(None, title="App Metadata")
    user_metadata: dict[str, Any] | str | None = Field(None, title="User Metadata")
    family_name: str | None = Field(None, title="Family Name")
    given_name: str | None = Field(None, title="Given Name")
    username: str | None = Field(None, title="Username")
    phone_number: str | None = Field(None, title="Phone Number")
    picture: str | None = Field(None, title="Picture")
    organisation: str | None = Field(None, title="Organisation")
    job_title: str | None = Field(None, title="Job Title")
    contact_consent: bool | None = Field(None, title="Contact Consent")
    terms_conditions_accepted: bool | None = Field(None, title="Terms Conditions Accepted")
    country: str | None = Field(None, title="Country")
    industry_sector: str | None = Field(None, title="Industry Sector")
    id: str | None = Field(None, title="Id")
    email: str = Field(..., title="Email")
    tenant: str = Field(..., title="Tenant")
    role: str = Field(..., title="Role")
    user_id: str | None = Field(None, title="User Id")


class UserNameplate(BaseModel):
    id: str = Field(..., title="Id")
    email: str = Field(..., title="Email")
    username: str = Field(..., title="Username")


class UserPatchParams(BaseModel):
    family_name: str | None = Field(None, title="Family Name")
    given_name: str | None = Field(None, title="Given Name")
    username: str | None = Field(None, title="Username")
    phone_number: str | None = Field(None, title="Phone Number")
    picture: str | None = Field(None, title="Picture")
    organisation: str | None = Field(None, title="Organisation")
    job_title: str | None = Field(None, title="Job Title")
    contact_consent: bool | None = Field(None, title="Contact Consent")
    terms_conditions_accepted: bool | None = Field(None, title="Terms Conditions Accepted")
    country: str | None = Field(None, title="Country")
    industry_sector: str | None = Field(None, title="Industry Sector")


class ValidationError(BaseModel):
    loc: list[str | int] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class VisualisationParams(BaseModel):
    node_centroids: LatLon
    map_center: MapView
    max_zoom: int = Field(..., title="Max Zoom")
    min_zoom: int = Field(..., title="Min Zoom")


class ChartDataCapacityBar(BaseModel):
    data: DataSeries


class ChartDataFacettedProduction(BaseModel):
    data: DataSeries


class ChartDataFlowTimeSeries(BaseModel):
    data: DataSeries


class ChartDataProductionBar(BaseModel):
    data: DataSeries


class ChartDataProductionTimeSeries(BaseModel):
    data: DataSeries


class ChartEdgeTimeSeries(BaseModel):
    data: DataSeries


class ChartNodeTimeseries(BaseModel):
    data: DataSeries


class Feature(BaseModel):
    type: str | None = Field(None, title="Type")
    geometry: Geometry
    properties: dict[str, Any] | None = Field(None, title="Properties")
    collection_slug: str = Field(..., title="Collection Slug")
    slug: str = Field(..., title="Slug")


class FeatureCollection(BaseModel):
    type: str | None = Field(None, title="Type")
    features: list[Feature] = Field(..., title="Features")
    properties: dict[str, Any] | None = Field(None, title="Properties")


class HTTPValidationError(BaseModel):
    detail: list[ValidationError] | None = Field(None, title="Detail")


class ModelPatch(BaseModel):
    user: UserNameplate | None = None
    slug: str | None = Field(None, title="Slug")
    new_slug: str | None = Field(None, title="New Slug")
    name: str | None = Field(None, title="Name")
    description: str | None = Field(None, title="Description")
    status: str | None = Field(None, title="Status")
    public: bool | None = Field(None, title="Public")
    featured: int | None = Field(None, title="Featured")
    links: list[ModelScenarioRunLink] | None = Field(None, title="Links")


class NodeInput(BaseModel):
    id: str = Field(..., title="Id")
    node_type: str = Field(..., title="Node Type")
    type_alias: str = Field(..., title="Type Alias")
    name_primary_en: str | None = Field(None, title="Name Primary En")
    public: bool | None = Field(None, title="Public")
    is_asset: bool | None = Field(None, title="Is Asset")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    parents: list[str | NodeInput] | None = Field(None, title="Parents")
    children: list[str | NodeInput] | None = Field(None, title="Children")
    summary: NodeSummary | None = None
    sector: str | None = Field(None, title="Sector")
    asset_properties: PowerUnitBase | DummyUnit | None = Field(None, title="Asset Properties")


class NodeOutput(BaseModel):
    id: str = Field(..., title="Id")
    node_type: str = Field(..., title="Node Type")
    type_alias: str = Field(..., title="Type Alias")
    name_primary_en: str | None = Field(None, title="Name Primary En")
    public: bool | None = Field(None, title="Public")
    is_asset: bool | None = Field(None, title="Is Asset")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    parents: list[str | NodeOutput] | None = Field(None, title="Parents")
    children: list[str | NodeOutput] | None = Field(None, title="Children")
    summary: NodeSummary | None = None
    sector: str | None = Field(None, title="Sector")
    asset_properties: PowerUnitBase | DummyUnit | None = Field(None, title="Asset Properties")


class NodeQueryResponse(BaseModel):
    nodes: list[NodeOutput] = Field(..., title="Nodes")
    next_page: int | None = Field(..., title="Next Page")


class NodeRetrievalResponse(BaseModel):
    nodes: list[NodeOutput] = Field(..., title="Nodes")
    representative_node_ids: list[str] | None = Field(None, title="Representative Node Ids")
    node_type_summary: list[NodeTypeSummaryElement] | None = Field(None, title="Node Type Summary")
    gross_capacity: float | None = Field(None, title="Gross Capacity")
    retiring_capacity: float | None = Field(None, title="Retiring Capacity")
    residual_capacity: float | None = Field(None, title="Residual Capacity")


class RunExtrema(BaseModel):
    capacity_node_gross: RunSingleExtrema | None = None
    capacity_node_new: RunSingleExtrema | None = None
    capacity_node_retirements: RunSingleExtrema | None = None
    capacity_node_residual: RunSingleExtrema | None = None
    capacity_edge_gross: RunSingleExtrema | None = None
    capacity_edge_new: RunSingleExtrema | None = None
    capacity_edge_retirements: RunSingleExtrema | None = None
    capacity_edge_residual: RunSingleExtrema | None = None
    flow: RunSingleExtrema | None = None
    production: RunSingleExtrema | None = None
    global_start_datetime: datetime | None = Field(..., title="Global Start Datetime")
    global_end_datetime: datetime | None = Field(..., title="Global End Datetime")


class RunPatch(BaseModel):
    user: UserNameplate | None = None
    run_slug: str | None = Field(None, title="Run Slug")
    model_slug: str | None = Field(None, title="Model Slug")
    scenario_slug: str | None = Field(None, title="Scenario Slug")
    new_slug: str | None = Field(None, title="New Slug")
    name: str | None = Field(None, title="Name")
    description: str | None = Field(None, title="Description")
    public: bool | None = Field(None, title="Public")
    featured: bool | None = Field(None, title="Featured")
    status: str | None = Field(None, title="Status")
    links: list[ModelScenarioRunLink] | None = Field(None, title="Links")


class ScenarioPatch(BaseModel):
    user: UserNameplate | None = None
    slug: str | None = Field(None, title="Slug")
    model_slug: str | None = Field(None, title="Model Slug")
    new_slug: str | None = Field(None, title="New Slug")
    name: str | None = Field(None, title="Name")
    featured: bool | None = Field(None, title="Featured")
    status: str | None = Field(None, title="Status")
    description: str | None = Field(None, title="Description")
    public: bool | None = Field(None, title="Public")
    links: list[ModelScenarioRunLink] | None = Field(None, title="Links")


class TimeScopeInput(BaseModel):
    contiguous: TimeScopeContiguous | None = None
    representative_slices: TimeScopeSlices | None = None


class TimeScopeOutput(BaseModel):
    contiguous: TimeScopeContiguous | None = None
    representative_slices: TimeScopeSlices | None = None


class VectorResponse(BaseModel):
    type: str | None = Field(None, title="Type")
    features: list[Feature] = Field(..., title="Features")
    next_page: int | None = Field(None, title="Next Page")


class Alias(BaseModel):
    node_id: str = Field(..., title="Node Id")
    alias: str = Field(..., title="Alias")
    public: bool | None = Field(None, title="Public")
    primary_lang: str | None = Field(None, title="Primary Lang")
    id: int = Field(..., title="Id")
    node: NodeOutput | None = None


class AliasQueryResponse(BaseModel):
    aliases: list[Alias] = Field(..., title="Aliases")
    next_page: int | None = Field(..., title="Next Page")


class AssetQueryResponse(BaseModel):
    assets: list[NodeOutput] = Field(..., title="Assets")
    next_page: int | None = Field(..., title="Next Page")


class ChartData(BaseModel):
    capacity_bar: ChartDataCapacityBar | None = None
    production_bar: ChartDataProductionBar | None = None
    facetted_production: ChartDataFacettedProduction | None = None
    node_capacity: ChartNodeTimeseries | None = None
    edge_capacity: ChartEdgeTimeSeries | None = None
    production_timeseries: ChartDataProductionTimeSeries | None = None
    flow_timeseries: ChartDataFlowTimeSeries | None = None


class ModelBase(BaseModel):
    name: str | None = Field(None, title="Name")
    slug: str | None = Field(None, title="Slug")
    description: str | None = Field(None, title="Description")
    version: str = Field(..., title="Version")
    time_scope: TimeScopeInput
    datetime_range_start: datetime = Field(..., title="Datetime Range Start")
    datetime_range_end: datetime = Field(..., title="Datetime Range End")
    sectors: list[str] = Field(..., title="Sectors")
    status: str | None = Field(None, title="Status")
    node_ids: list[str] = Field(..., title="Node Ids")
    representative_node_ids: list[str] = Field(..., title="Representative Node Ids")
    public: bool = Field(..., title="Public")
    featured: int | None = Field(None, title="Featured")
    data: dict[str, Any] | None = Field(None, title="Data")
    links: list[ModelScenarioRunLink] | None = Field(None, title="Links")


class Model(BaseModel):
    name: str | None = Field(None, title="Name")
    slug: str = Field(..., title="Slug")
    description: str | None = Field(None, title="Description")
    version: str = Field(..., title="Version")
    time_scope: TimeScopeOutput
    datetime_range_start: datetime = Field(..., title="Datetime Range Start")
    datetime_range_end: datetime = Field(..., title="Datetime Range End")
    sectors: list[str] = Field(..., title="Sectors")
    status: str | None = Field(None, title="Status")
    node_ids: list[str] = Field(..., title="Node Ids")
    representative_node_ids: list[str] = Field(..., title="Representative Node Ids")
    public: bool = Field(..., title="Public")
    featured: int | None = Field(None, title="Featured")
    data: dict[str, Any] | None = Field(None, title="Data")
    links: list[ModelScenarioRunLink] | None = Field(None, title="Links")
    owner_id: str = Field(..., title="Owner Id")
    views: int | None = Field(None, title="Views")
    stars: int | None = Field(None, title="Stars")
    owner: UserNameplate | None = None
    scenarios: list[Scenario] | None = Field(None, title="Scenarios")
    node_type_summary: list[NodeTypeSummaryElement] = Field(..., title="Node Type Summary")
    featured_scenario: Scenario | None = None
    preview_image_url: str | None = Field(None, title="Preview Image Url")


class ModelQueryResult(BaseModel):
    models: list[Model] = Field(..., title="Models")
    page: int | None = Field(None, title="Page")
    total_pages: int | None = Field(None, title="Total Pages")


class Run(BaseModel):
    name: str = Field(..., title="Name")
    slug: str = Field(..., title="Slug")
    description: str = Field(..., title="Description")
    public: bool = Field(..., title="Public")
    scenario_slug: str = Field(..., title="Scenario Slug")
    model_slug: str = Field(..., title="Model Slug")
    data: dict[str, Any] | None = Field(None, title="Data")
    featured: bool | None = Field(None, title="Featured")
    status: str = Field(..., title="Status")
    links: list[ModelScenarioRunLink] | None = Field(None, title="Links")
    capacity_datetime_convention: str | None = Field(None, title="Capacity Datetime Convention")
    production_datetime_convention: str | None = Field(None, title="Production Datetime Convention")
    flow_datetime_convention: str | None = Field(None, title="Flow Datetime Convention")
    preview_image_url: str | None = Field(None, title="Preview Image Url")
    owner_id: str = Field(..., title="Owner Id")
    model: Model | None = None
    scenario: Scenario | None = None
    owner: UserNameplate | None = None
    nodes: list[str] | None = Field(None, title="Nodes")
    valid_datetimes: list[str] | None = Field(None, title="Valid Datetimes")
    extrema: RunExtrema | None = None
    capacity: dict[str, Any] | None = Field(None, title="Capacity")
    production: dict[str, Any] | None = Field(None, title="Production")
    flow: dict[str, Any] | None = Field(None, title="Flow")
    marginal_cost: dict[str, Any] | None = Field(None, title="Marginal Cost")
    system_cost: dict[str, Any] | None = Field(None, title="System Cost")
    profiles: dict[str, Any] | None = Field(None, title="Profiles")
    metrics: list[Metric] | None = Field(None, title="Metrics")


class RunQueryResult(BaseModel):
    runs: list[Run] = Field(..., title="Runs")
    page: int | None = Field(None, title="Page")
    total_pages: int | None = Field(None, title="Total Pages")


class Scenario(BaseModel):
    name: str = Field(..., title="Name")
    version: str = Field(..., title="Version")
    slug: str | None = Field(None, title="Slug")
    model_slug: str = Field(..., title="Model Slug")
    public: bool = Field(..., title="Public")
    description: str | None = Field(..., title="Description")
    featured: bool | None = Field(None, title="Featured")
    status: str = Field(..., title="Status")
    links: list[ModelScenarioRunLink] | None = Field(None, title="Links")
    data: dict[str, Any] | None = Field(None, title="Data")
    owner_id: str = Field(..., title="Owner Id")
    model: Model | None = None
    owner: UserNameplate | None = None
    runs: list[Run] | None = Field(None, title="Runs")
    featured_run: Run | None = None
    preview_image_url: str | None = Field(None, title="Preview Image Url")


class ScenarioQueryResult(BaseModel):
    scenarios: list[Scenario] = Field(..., title="Scenarios")
    page: int | None = Field(None, title="Page")
    total_pages: int | None = Field(None, title="Total Pages")


class UserFull(BaseModel):
    family_name: str | None = Field(None, title="Family Name")
    given_name: str | None = Field(None, title="Given Name")
    username: str = Field(..., title="Username")
    phone_number: str | None = Field(None, title="Phone Number")
    picture: str | None = Field(None, title="Picture")
    organisation: str | None = Field(None, title="Organisation")
    job_title: str | None = Field(None, title="Job Title")
    contact_consent: bool | None = Field(None, title="Contact Consent")
    terms_conditions_accepted: bool | None = Field(None, title="Terms Conditions Accepted")
    country: str | None = Field(None, title="Country")
    industry_sector: str | None = Field(None, title="Industry Sector")
    id: str = Field(..., title="Id")
    email: str = Field(..., title="Email")
    tenant: str = Field(..., title="Tenant")
    role: str = Field(..., title="Role")
    created_at: datetime | None = Field(None, title="Created At")
    updated_at: datetime | None = Field(None, title="Updated At")
    starred_models: list[Model] | None = Field(None, title="Starred Models")
    recently_viewed_models: list[Model] | None = Field(None, title="Recently Viewed Models")


NodeInput.model_rebuild()
NodeOutput.model_rebuild()
Model.model_rebuild()
Run.model_rebuild()
